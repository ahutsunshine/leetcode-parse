//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 12 files.
  struct file {
    /// Resource file `Application.xcconfig`.
    static let applicationXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Application", pathExtension: "xcconfig")
    /// Resource file `Common.xcconfig`.
    static let commonXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Common", pathExtension: "xcconfig")
    /// Resource file `Environment.xcconfig`.
    static let environmentXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Environment", pathExtension: "xcconfig")
    /// Resource file `Frameworks.xcconfig`.
    static let frameworksXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Frameworks", pathExtension: "xcconfig")
    /// Resource file `Modules.xcconfig`.
    static let modulesXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Modules", pathExtension: "xcconfig")
    /// Resource file `appstore-release.rb`.
    static let appstoreReleaseRb = Rswift.FileResource(bundle: R.hostingBundle, name: "appstore-release", pathExtension: "rb")
    /// Resource file `build-dependency.sh`.
    static let buildDependencySh = Rswift.FileResource(bundle: R.hostingBundle, name: "build-dependency", pathExtension: "sh")
    /// Resource file `build.log`.
    static let buildLog = Rswift.FileResource(bundle: R.hostingBundle, name: "build", pathExtension: "log")
    /// Resource file `build2.log`.
    static let build2Log = Rswift.FileResource(bundle: R.hostingBundle, name: "build2", pathExtension: "log")
    /// Resource file `rswift`.
    static let rswift = Rswift.FileResource(bundle: R.hostingBundle, name: "rswift", pathExtension: "")
    /// Resource file `run-swiftlint.sh`.
    static let runSwiftlintSh = Rswift.FileResource(bundle: R.hostingBundle, name: "run-swiftlint", pathExtension: "sh")
    /// Resource file `update-plist.sh`.
    static let updatePlistSh = Rswift.FileResource(bundle: R.hostingBundle, name: "update-plist", pathExtension: "sh")
    
    /// `bundle.url(forResource: "Application", withExtension: "xcconfig")`
    static func applicationXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.applicationXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Common", withExtension: "xcconfig")`
    static func commonXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.commonXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Environment", withExtension: "xcconfig")`
    static func environmentXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.environmentXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Frameworks", withExtension: "xcconfig")`
    static func frameworksXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.frameworksXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Modules", withExtension: "xcconfig")`
    static func modulesXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.modulesXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "appstore-release", withExtension: "rb")`
    static func appstoreReleaseRb(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.appstoreReleaseRb
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "build", withExtension: "log")`
    static func buildLog(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.buildLog
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "build-dependency", withExtension: "sh")`
    static func buildDependencySh(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.buildDependencySh
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "build2", withExtension: "log")`
    static func build2Log(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.build2Log
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "rswift", withExtension: "")`
    static func rswift(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rswift
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "run-swiftlint", withExtension: "sh")`
    static func runSwiftlintSh(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.runSwiftlintSh
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "update-plist", withExtension: "sh")`
    static func updatePlistSh(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.updatePlistSh
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `list`.
    static let list = Rswift.ImageResource(bundle: R.hostingBundle, name: "list")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    
    /// `UIImage(named: "list", bundle: ..., traitCollection: ...)`
    static func list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.list, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 2 localization keys.
    struct localizable {
      /// en translation: Problems
      /// 
      /// Locales: en
      static let problemsTitle = Rswift.StringResource(key: "Problems-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en
      static let settingsTitle = Rswift.StringResource(key: "Settings-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Problems
      /// 
      /// Locales: en
      static func problemsTitle(_: Void = ()) -> String {
        return NSLocalizedString("Problems-title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en
      static func settingsTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings-title", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
